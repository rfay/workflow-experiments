name: Release

on:
  push:
    branches: "main"

env:
  BUILDKIT_PROGRESS: plain
  DOCKER_CLI_EXPERIMENTAL: enabled
  DDEV_DEBUG: true
  JUNK: ${{ secrets.JUNK }}

jobs:
  build:
    name: Build DDEV executables
    runs-on: ubuntu-20.04

    steps:
      - name: Set up linux
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq nsis
          wget https://sourceforge.net/projects/nsis/files/NSIS%203/3.06.1/nsis-3.06.1.zip/download && sudo unzip -o -d /usr/share download && sudo mv /usr/share/nsis-3.06.1 /usr/share/nsis
          wget https://github.com/GsNSIS/EnVar/releases/latest/download/EnVar-Plugin.zip && sudo unzip -o -d /usr/share/nsis EnVar-Plugin.zip
          wget https://github.com/DigitalMediaServer/NSIS-INetC-plugin/releases/latest/download/INetC.zip && sudo unzip -o -d /usr/share/nsis/Plugins INetC.zip

      - uses: actions/checkout@v2
        with:
          # We need to get all branches and tags for git describe to work properly
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: 1.*

      - name: Build DDEV executables
        run: make windows_install darwin_amd64 darwin_arm64

      - name: cache build results
        uses: actions/cache@v2
        with:
          path: .gotmp/bin
          key: ${{ github.sha }}-unsigned

  restore-on-ubuntu:
    name: Restore on Ubuntu
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: restore build results from cache
        uses: actions/cache@v2
        id: unsigned-build
        with:
          path: .gotmp/bin
          key: ${{ github.sha }}-unsigned
      - name: test that unsigned build was loaded
        if: steps.unsigned-build.cache-hit != 'true'
        run: exit 1
#  restore-on-windows:
#    name: Restore on Windows
#    runs-on: windows-latest
#    needs: build
#    steps:
#      - name: restore build results from cache
#        uses: actions/cache@v2
#        id: unsigned-build
#        with:
#          path: .gotmp/bin
#          key: ${{ github.sha }}-unsigned

  restore-on-windows-selfhosted:
    name: Restore on Self-hosted
    runs-on: [ self-hosted, windows-signer ]
    needs: build
    steps:
      - name: restore build results from cache
        uses: actions/cache@v2
        id: unsigned-build
        with:
          path: .gotmp/bin
          key: ${{ github.sha }}-unsigned
      - name: test that unsigned build was loaded
        if: steps.unsigned-build.cache-hit != 'true'
        run: exit 1

  sign-ddev-on-windows:
    name: Sign ddev.exe on Windows
    runs-on: [ self-hosted, windows-signer ]
    needs: build
    steps:
      - name: restore build results from cache
        uses: actions/cache@v2
        id: unsigned-build
        with:
          path: .gotmp/bin
          key: ${{ github.sha }}-unsigned
      - name: test that unsigned build was loaded
        if: steps.unsigned-build.cache-hit != 'true'
        run: exit 1
      - name: Sign windows ddev.exe
        shell: bash
        run: |
          set -x
          ls -l /c/tmp
          signtool sign ".gotmp/bin/windows_amd64/ddev.exe" ".gotmp/bin/windows_amd64/mkcert.exe" ".gotmp/bin/windows_amd64/nssm.exe" ".gotmp/bin/windows_amd64/winnfsd.exe" ".gotmp/bin/windows_amd64/ddev_gen_autocomplete.exe"
      - name: Cache signed binaries
        uses: actions/cache@v2
        with:
          path: .gotmp/bin/windows_amd64
          key: ${{ github.sha }}-signed-windows-binaries

  build-windows-installer-with-signed-ddev:
    name: Build the windows installer using the signed executables
    runs-on: ubuntu-20.04
    needs: sign-ddev-on-windows
    steps:
      - uses: actions/checkout@v2
        with:
          # We need to get all branches and tags for git describe to work properly
          fetch-depth: 0
      - name: restore signed windows stuff
        uses: actions/cache@v2
        with:
          path: .gotmp/bin/windows_amd64
          key: ${{ github.sha }}-signed-windows-binaries
      - uses: actions/setup-go@v2
        with:
          go-version: 1.*
      - name: Set up linux
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq nsis
          wget https://sourceforge.net/projects/nsis/files/NSIS%203/3.06.1/nsis-3.06.1.zip/download && sudo unzip -o -d /usr/share download && sudo mv /usr/share/nsis-3.06.1 /usr/share/nsis
          wget https://github.com/GsNSIS/EnVar/releases/latest/download/EnVar-Plugin.zip && sudo unzip -o -d /usr/share/nsis EnVar-Plugin.zip
          wget https://github.com/DigitalMediaServer/NSIS-INetC-plugin/releases/latest/download/INetC.zip && sudo unzip -o -d /usr/share/nsis/Plugins INetC.zip
      - name: Make installer with signed binaries
        run: make windows_install
      - name: save signed windows stuff
        uses: actions/cache@v2
        with:
          path: .gotmp/bin/windows_amd64
          key: ${{ github.sha }}-unsigned-windows-installer

  sign-ddev-installer-on-windows:
    name: Sign ddev_windows_installer
    runs-on: [ self-hosted, windows-signer ]
    needs: build-windows-installer-with-signed-ddev
    steps:
      - name: restore signed windows binaries
        uses: actions/cache@v2
        with:
          path: C:/tmp/windows_amd64
          key: ${{ github.sha }}-unsigned-windows-installer
      - name: Sign ddev_windows_installer
        shell: bash
        run: signtool sign "C:/tmp/windows_amd64/ddev_windows_installer*.exe"
      - name: cache signed windows installer
        uses: actions/cache@v2
        with:
          path: C:/tmp/windows_amd64
          key: ${{ github.sha }}-signed-windows-installer


  sign-ddev-on-macos:
    name: Sign and Notarize ddev on macOS
    runs-on: macos-latest
    needs: build
    steps:
      - name: "setup macOS"
        run: |
          brew install coreutils gnu-getopt jq
          pip3 install yq
      - uses: actions/checkout@v2
        with:
          # We need to get all branches and tags for git describe to work properly
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: 1.*
      - name: download ddev-macos-amd64
        uses: actions/download-artifact@v2
        with:
          name: ddev-macos-amd64
          path: ".gotmp/bin/darwin_amd64"
      - name: Sign and notarize binary
        env:
          DDEV_MACOS_SIGNING_PASSWORD: ${{ secrets.DDEV_MACOS_SIGNING_PASSWORD }}
          DDEV_MACOS_APP_PASSWORD: ${{ secrets.DDEV_MACOS_APP_PASSWORD }}
        run: |
          set -o errexit -o pipefail
          if [ -z "${DDEV_MACOS_SIGNING_PASSWORD}" ] ; then echo "DDEV_MACOS_SIGNING_PASSWORD is empty"; fi
          if [ -z "${DDEV_MACOS_APP_PASSWORD}" ] ; then echo "DDEV_MACOS_APP_PASSWORD is empty"; fi
          echo "Signing and notarizing .gotmp/bin/darwin_amd64/ddev ..."
          curl -s https://raw.githubusercontent.com/drud/signing_tools/master/macos_sign.sh | bash -s -  --signing-password="${DDEV_MACOS_SIGNING_PASSWORD}" --cert-file=certfiles/ddev_developer_id_cert.p12 --cert-name="Developer ID Application: DRUD Technology, LLC (3BAN66AG5M)" --target-binary=".gotmp/bin/darwin_amd64/ddev"
          curl -sSL -f https://raw.githubusercontent.com/drud/signing_tools/master/macos_notarize.sh | bash -s -  --app-specific-password=${DDEV_MACOS_APP_PASSWORD} --apple-id=accounts@drud.com --primary-bundle-id=com.ddev.ddev --target-binary=".gotmp/bin/darwin_amd64/ddev"
          ls -lR .gotmp/bin/darwin_amd64
      - name: Upload signed ddev-macos-amd64 binaries
        uses: actions/upload-artifact@v2
        with:
          name: ddev-macos-amd64
          path: .gotmp/bin/darwin_amd64
#      - name: Upload signed ddev-macos-arm64 binaries
#        uses: actions/upload-artifact@v2
#        with:
#          name: ddev-macos-arm64
#          path: .gotmp/bin/darwin_arm64

